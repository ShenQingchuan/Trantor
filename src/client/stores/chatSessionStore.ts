import type { ChatFlowSession } from '../../bridge/types/chatFlow'
import type { ChatDisplayMessage } from '../types/chatFlow'
import { useMutation, useQuery, useQueryCache } from '@pinia/colada'
import {
  createChatSession,
  deleteChatSession,
  fetchChatMessages,
  fetchChatSession,
  fetchChatSessions,
  generateSessionTitle,
  saveChatMessages,
  updateChatSession,
} from '../requests/chatSession'

const chatSessionStoreId = 'trantor:chat-session-store' as const

export const useChatSessionStore = defineStore(chatSessionStoreId, () => {
  const { t } = useI18n()
  const currentSession = ref<ChatFlowSession | null>(null)
  const error = ref<string | null>(null)

  // 获取查询缓存实例，用于缓存失效
  const queryCache = useQueryCache()

  // 使用 useQuery 获取会话列表
  const {
    state: sessionsState,
    asyncStatus: sessionsStatus,
    refresh: refreshSessions,
  } = useQuery<ChatFlowSession[]>({
    key: ['chatSessions'],
    query: () => fetchChatSessions(),
  })

  const sessions = computed(() => sessionsState.value?.data || [])
  const isLoading = computed(() => sessionsStatus.value === 'loading')

  // ===== MUTATIONS =====
  // 创建新会话的 mutation
  const {
    mutate: createSessionMutation,
    asyncStatus: createSessionStatus,
  } = useMutation({
    mutation: (title: string) => createChatSession(title),
    onSuccess: (newSession) => {
      // 设置为当前会话
      currentSession.value = newSession
      // 失效查询缓存，触发重新获取
      queryCache.invalidateQueries({ key: ['chatSessions'] })
    },
    onError: (err) => {
      error.value = err instanceof Error ? err.message : t('chat_session__error_create_failed')
      console.error('创建会话失败:', err)
    },
  })

  // 更新会话标题的 mutation
  const {
    mutate: updateSessionTitleMutation,
    asyncStatus: updateSessionStatus,
  } = useMutation({
    mutation: ({ sessionId, title, isAutoGenerated }: {
      sessionId: string
      title: string
      isAutoGenerated: boolean
    }) => updateChatSession(sessionId, {
      title,
      is_title_auto_generated: isAutoGenerated,
    }),
    onSuccess: (_, { sessionId }) => {
      // 失效查询缓存，触发重新获取
      queryCache.invalidateQueries({ key: ['chatSessions'] })

      // 如果更新的是当前会话，等下次 sessions computed 更新后同步
      if (currentSession.value?.id === sessionId) {
        nextTick(() => {
          const updatedSession = sessions.value.find(s => s.id === sessionId)
          if (updatedSession) {
            currentSession.value = updatedSession
          }
        })
      }
    },
    onError: (err) => {
      error.value = err instanceof Error ? err.message : t('chat_session__error_update_failed')
      console.error('更新会话标题失败:', err)
    },
  })

  // 删除会话的 mutation
  const {
    mutate: deleteSessionMutation,
    asyncStatus: deleteSessionStatus,
  } = useMutation({
    mutation: (sessionId: string) => deleteChatSession(sessionId),
    onSuccess: (_, sessionId) => {
      // 如果删除的是当前会话，立即清空当前会话
      if (currentSession.value?.id === sessionId) {
        currentSession.value = null
      }
      // 失效查询缓存，触发重新获取
      queryCache.invalidateQueries({ key: ['chatSessions'] })
    },
    onError: (err) => {
      error.value = err instanceof Error ? err.message : t('chat_session__error_delete_failed')
      console.error('删除会话失败:', err)
    },
  })

  // 保存消息的 mutation
  const {
    mutate: saveMessagesMutation,
    asyncStatus: saveMessagesStatus,
  } = useMutation({
    mutation: ({ sessionId, messages }: {
      sessionId: string
      messages: ChatDisplayMessage[]
    }) => saveChatMessages(sessionId, messages),
    onSuccess: () => {
      // 消息保存成功后，可能会影响会话的 message_count 等信息
      // 但不需要每次都刷新，只在需要时才失效缓存
    },
    onError: (err) => {
      error.value = err instanceof Error ? err.message : t('chat_session__error_save_failed')
      console.error('保存对话失败:', err)
    },
  })

  // ===== PUBLIC METHODS =====
  // 创建新会话
  const createNewSession = async (title?: string) => {
    const sessionTitle = title || t('chat_new_conversation')
    error.value = null

    // 使用 mutation 创建会话，成功和错误处理在 mutation 中完成
    const result = await createSessionMutation(sessionTitle)
    return result
  }

  // 设置当前会话
  const setCurrentSession = async (sessionId: string) => {
    try {
      error.value = null
      const session = sessions.value.find(s => s.id === sessionId)
      if (session) {
        currentSession.value = session
      }
      else {
        // 如果本地没有，从服务器获取
        const fetchedSession = await fetchChatSession(sessionId)
        currentSession.value = fetchedSession

        // 只在本地缓存没有时才失效查询，触发重新获取以确保数据同步
        queryCache.invalidateQueries({ key: ['chatSessions'] })
      }
    }
    catch (err) {
      error.value = err instanceof Error ? err.message : t('chat_session__error_load_failed')
      console.error('设置当前会话失败:', err)
    }
  }

  // 更新会话标题
  const updateSessionTitle = async (sessionId: string, newTitle: string) => {
    error.value = null

    // 使用 mutation 更新标题，成功和错误处理在 mutation 中完成
    const result = await updateSessionTitleMutation({
      sessionId,
      title: newTitle,
      isAutoGenerated: false, // 手动编辑的标题标记为非自动生成
    })
    return result
  }

  // 删除会话
  const deleteSession = async (sessionId: string) => {
    error.value = null

    // 使用 mutation 删除会话，成功和错误处理在 mutation 中完成
    const result = await deleteSessionMutation(sessionId)
    return result
  }

  // 保存当前对话消息到会话
  const saveCurrentChatToSession = async (sessionId: string, messages: ChatDisplayMessage[]) => {
    try {
      error.value = null

      // 使用 mutation 保存消息
      await saveMessagesMutation({ sessionId, messages })

      // 如果消息数量达到4条以上且标题未自动生成过，尝试生成标题
      const currentSessionData = sessions.value.find(s => s.id === sessionId)
      if (currentSessionData && messages.length >= 4 && !currentSessionData.is_title_auto_generated) {
        let finalTitle = ''
        try {
          finalTitle = await generateSessionTitle(sessionId)
        }
        catch (titleError) {
          console.error('生成会话标题失败:', titleError)
          finalTitle = t('chat_new_conversation')
        }

        try {
          // 使用 mutation 更新标题
          await updateSessionTitleMutation({
            sessionId,
            title: finalTitle,
            isAutoGenerated: true, // 标记为已自动生成
          })
        }
        catch (updateError) {
          console.error('更新会话标题失败:', updateError)
          // 标题更新失败时，不影响消息保存
        }
      }

      // 对于消息保存，我们通常不需要刷新整个会话列表
      // 因为 message_count 等信息不是实时关键的
    }
    catch (err) {
      error.value = err instanceof Error ? err.message : t('chat_session__error_save_failed')
      console.error('保存对话失败:', err)
      throw err
    }
  }

  // 从会话加载消息
  const loadMessagesFromSession = async (sessionId: string) => {
    try {
      const messages = await fetchChatMessages(sessionId)
      return messages
    }
    catch (err) {
      error.value = err instanceof Error ? err.message : t('chat_session__error_load_messages_failed')
      console.error('加载消息失败:', err)
      throw err
    }
  }

  // 清空当前会话
  const clearCurrentSession = () => {
    currentSession.value = null
  }

  return {
    // 状态
    sessions: readonly(sessions),
    currentSession: readonly(currentSession),
    isLoading: readonly(isLoading),
    error: readonly(error),

    // 加载状态
    isCreatingSession: computed(() => createSessionStatus.value === 'loading'),
    isUpdatingTitle: computed(() => updateSessionStatus.value === 'loading'),
    isDeletingSession: computed(() => deleteSessionStatus.value === 'loading'),
    isSavingMessages: computed(() => saveMessagesStatus.value === 'loading'),

    // 方法
    refreshSessions, // 保留用于手动刷新
    createNewSession,
    setCurrentSession,
    clearCurrentSession,
    updateSessionTitle,
    deleteSession,
    saveCurrentChatToSession,
    loadMessagesFromSession,
  }
})
