import type { ChatFlowSession } from '../../bridge/types/chatFlow'
import type { ChatDisplayMessage } from '../types/chatFlow'
import { useMutation, useQuery, useQueryCache } from '@pinia/colada'
import {
  createChatSession,
  deleteChatSession,
  fetchChatMessages,
  fetchChatSession,
  fetchChatSessions,
  generateSessionTitle,
  saveChatMessages,
  updateChatSession,
} from '../requests/chatSession'

const chatSessionStoreId = 'trantor:chat-session-store' as const

interface SessionUIState {
  isSummarizing: boolean
}

export const useChatSessionStore = defineStore(chatSessionStoreId, () => {
  const { t } = useI18n()
  const currentSession = ref<ChatFlowSession | null>(null)
  const error = ref<string | null>(null)

  // 获取查询缓存实例，用于缓存失效
  const queryCache = useQueryCache()

  // UI 状态：跟踪每个会话的标题生成状态（不污染数据库模型）
  const sessionUIStates = ref<Map<string, SessionUIState>>(new Map())

  // 懒加载标志 - 只有在真正需要时才获取会话列表
  const shouldFetch = ref(false)

  // 使用 useQuery 获取会话列表
  const {
    state: sessionsState,
    asyncStatus: sessionsStatus,
    refresh: refreshSessions,
  } = useQuery<ChatFlowSession[]>({
    key: ['chatSessions'],
    query: () => fetchChatSessions(),
    staleTime: 5 * 60 * 1000, // 5分钟内不重新获取
    gcTime: 10 * 60 * 1000, // 10分钟缓存时间
    enabled: () => shouldFetch.value, // 只有在 shouldFetch 为 true 时才执行查询
  })

  const sessions = computed(() => sessionsState.value?.data || [])
  const isLoading = computed(() => sessionsStatus.value === 'loading')

  // ===== MUTATIONS =====
  // 创建新会话的 mutation（仅用于发送请求，乐观更新在 createNewSession 中处理）
  const {
    mutateAsync: createSessionMutation,
    asyncStatus: createSessionStatus,
  } = useMutation({
    mutation: (title: string) => createChatSession(title),
  })

  // 更新会话标题的 mutation
  const {
    mutate: updateSessionTitleMutation,
    asyncStatus: updateSessionStatus,
  } = useMutation({
    mutation: ({ sessionId, title, isAutoGenerated }: {
      sessionId: string
      title: string
      isAutoGenerated: boolean
    }) => updateChatSession(sessionId, {
      title,
      is_title_auto_generated: isAutoGenerated,
    }),
    onSuccess: (updatedSession, { sessionId, title, isAutoGenerated }) => {
      // 乐观更新：直接更新本地缓存中的会话数据
      if (sessionsState.value?.data) {
        const newSessions = sessionsState.value.data.map(session =>
          session.id === sessionId
            ? { ...session, title, is_title_auto_generated: isAutoGenerated }
            : session,
        )
        queryCache.setQueryData(['chatSessions'], newSessions)
      }

      // 如果更新的是当前会话，直接更新当前会话
      if (currentSession.value?.id === sessionId) {
        currentSession.value = { ...currentSession.value, title, is_title_auto_generated: isAutoGenerated }
      }
    },
    onError: (err) => {
      error.value = err instanceof Error ? err.message : t('chat_session__error_update_failed')
      console.error('更新会话标题失败:', err)
    },
  })

  // 删除会话的 mutation（仅用于发送请求，乐观更新在 deleteSession 中处理）
  const {
    mutateAsync: deleteSessionMutation,
    asyncStatus: deleteSessionStatus,
  } = useMutation({
    mutation: (sessionId: string) => deleteChatSession(sessionId),
    // 注意：不在这里处理 onSuccess 和 onError，因为乐观更新逻辑在 deleteSession 中统一处理
  })

  // 保存消息的 mutation
  const {
    mutateAsync: saveMessagesMutation,
    asyncStatus: saveMessagesStatus,
  } = useMutation({
    mutation: ({ sessionId, messages }: {
      sessionId: string
      messages: ChatDisplayMessage[]
    }) => saveChatMessages(sessionId, messages),
    onSuccess: () => {
      // 消息保存成功后，可能会影响会话的 message_count 等信息
      // 但不需要每次都刷新，只在需要时才失效缓存
    },
    onError: (err) => {
      error.value = err instanceof Error ? err.message : t('chat_session__error_save_failed')
      console.error('保存对话失败:', err)
    },
  })

  // ===== PUBLIC METHODS =====
  // 启用会话数据获取（懒加载）
  const enableSessionsFetch = () => {
    if (!shouldFetch.value) {
      shouldFetch.value = true
    }
  }

  // 创建新会话
  const createNewSession = async (title?: string) => {
    const sessionTitle = title || t('chat_new_conversation')
    error.value = null

    // 确保启用了会话获取
    enableSessionsFetch()

    // 乐观更新：立即创建临时会话并添加到 UI
    const tempId = `temp-${Date.now()}-${Math.random().toString(36).substring(2)}`
    const now = new Date().toISOString()
    const tempSession: ChatFlowSession = {
      id: tempId,
      title: sessionTitle,
      created: now,
      updated: now,
      last_message_at: now,
      message_count: 0,
      archived: false,
      is_title_auto_generated: false,
    }

    // 立即添加临时会话到缓存中
    if (sessionsState.value?.data) {
      const newSessions = [tempSession, ...sessionsState.value.data]
      queryCache.setQueryData(['chatSessions'], newSessions)
    }
    else {
      // 如果没有缓存数据，创建初始数据
      queryCache.setQueryData(['chatSessions'], [tempSession])
    }

    // 立即设置为当前会话
    currentSession.value = tempSession

    try {
      // 发送真实请求，使用 mutateAsync 获取结果
      const realSession = await createSessionMutation(sessionTitle)

      // 成功：用真实会话替换临时会话
      if (sessionsState.value?.data) {
        const newSessions = sessionsState.value.data.map(session =>
          session.id === tempId ? realSession : session,
        )
        queryCache.setQueryData(['chatSessions'], newSessions)
      }

      // 更新当前会话为真实会话
      currentSession.value = realSession

      return realSession
    }
    catch (err) {
      // 失败：移除临时会话
      if (sessionsState.value?.data) {
        const newSessions = sessionsState.value.data.filter(session => session.id !== tempId)
        queryCache.setQueryData(['chatSessions'], newSessions)
      }

      // 清空当前会话
      currentSession.value = null

      // 重新抛出错误
      throw err
    }
  }

  // 设置当前会话
  const setCurrentSession = async (sessionId: string) => {
    try {
      error.value = null
      const session = sessions.value.find(s => s.id === sessionId)
      if (session) {
        currentSession.value = session
      }
      else {
        // 如果本地没有，从服务器获取
        const fetchedSession = await fetchChatSession(sessionId)
        currentSession.value = fetchedSession

        // 乐观更新：将获取到的会话添加到本地缓存，而不是重新获取整个列表
        if (sessionsState.value?.data) {
          const newSessions = [fetchedSession, ...sessionsState.value.data]
          queryCache.setQueryData(['chatSessions'], newSessions)
        }
      }
    }
    catch (err) {
      error.value = err instanceof Error ? err.message : t('chat_session__error_load_failed')
      console.error('设置当前会话失败:', err)
    }
  }

  // 更新会话标题
  const updateSessionTitle = async (sessionId: string, newTitle: string) => {
    error.value = null

    // 使用 mutation 更新标题，成功和错误处理在 mutation 中完成
    const result = await updateSessionTitleMutation({
      sessionId,
      title: newTitle,
      isAutoGenerated: false, // 手动编辑的标题标记为非自动生成
    })
    return result
  }

  // 删除会话
  const deleteSession = async (sessionId: string) => {
    error.value = null

    // 查找要删除的会话（用于失败时回滚）
    const sessionToDelete = sessions.value.find(s => s.id === sessionId)
    if (!sessionToDelete) {
      throw new Error(t('chat_session__error_session_not_found'))
    }

    // 保存被删除会话在列表中的索引位置（用于失败时恢复到原位置）
    const sessionIndex = sessions.value.findIndex(s => s.id === sessionId)
    const isCurrentSession = currentSession.value?.id === sessionId

    // 乐观更新：立即从 UI 移除会话
    if (sessionsState.value?.data) {
      const newSessions = sessionsState.value.data.filter(session => session.id !== sessionId)
      queryCache.setQueryData(['chatSessions'], newSessions)
    }

    // 如果删除的是当前会话，立即清空当前会话
    if (isCurrentSession) {
      currentSession.value = null
    }

    try {
      // 发送真实的删除请求
      await deleteSessionMutation(sessionId)
    }
    catch (err) {
      // 删除失败：回滚 UI 状态

      // 1. 恢复会话到原来的位置
      if (sessionsState.value?.data) {
        const restoredSessions = [...sessionsState.value.data]
        restoredSessions.splice(sessionIndex, 0, sessionToDelete)
        queryCache.setQueryData(['chatSessions'], restoredSessions)
      }

      // 2. 如果删除的是当前会话，恢复当前会话
      if (isCurrentSession) {
        currentSession.value = sessionToDelete
      }

      // 3. 设置错误信息并重新抛出
      error.value = err instanceof Error ? err.message : t('chat_session__error_delete_failed')
      console.error('删除会话失败:', err)
      throw err
    }
  }

  // 保存当前对话消息到会话
  const saveCurrentChatToSession = async (sessionId: string, messages: ChatDisplayMessage[]) => {
    try {
      error.value = null

      // 消息保存和标题生成
      await saveMessagesMutation({ sessionId, messages })

      // 如果消息数量达到4条以上且标题未自动生成过，并行生成标题
      const currentSessionData = sessions.value.find(s => s.id === sessionId)

      // 等待标题生成完成（如果有的话）
      if (currentSessionData && messages.length >= 4 && !currentSessionData.is_title_auto_generated) {
        await (async () => {
          try {
            // 再次检查会话状态，确保会话仍然存在且未生成过标题
            const updatedSessionData = sessions.value.find(s => s.id === sessionId)
            if (!updatedSessionData || updatedSessionData.is_title_auto_generated) {
              return
            }

            const finalTitle = await generateSessionTitle(sessionId)

            // 再次检查，确保在生成标题期间会话状态没有改变
            const finalSessionData = sessions.value.find(s => s.id === sessionId)
            if (!finalSessionData || finalSessionData.is_title_auto_generated) {
              return
            }

            // 使用 mutation 更新标题
            await updateSessionTitleMutation({
              sessionId,
              title: finalTitle,
              isAutoGenerated: true, // 标记为已自动生成
            })
          }
          catch (titleError) {
            console.error('生成会话标题失败:', titleError)
            // 标题生成失败时，不影响消息保存，也不抛出错误
          }
        })()
      }
    }
    catch (err) {
      error.value = err instanceof Error ? err.message : t('chat_session__error_save_failed')
      console.error('保存对话失败:', err)
      throw err
    }
  }

  // 从会话加载消息
  const loadMessagesFromSession = async (sessionId: string) => {
    try {
      const messages = await fetchChatMessages(sessionId)
      return messages
    }
    catch (err) {
      error.value = err instanceof Error ? err.message : t('chat_session__error_load_messages_failed')
      console.error('加载消息失败:', err)
      throw err
    }
  }

  // 清空当前会话
  const clearCurrentSession = () => {
    currentSession.value = null
  }

  // 获取会话的 UI 状态
  const getSessionUIState = (sessionId: string) => {
    if (!sessionUIStates.value.has(sessionId)) {
      sessionUIStates.value.set(sessionId, { isSummarizing: false })
    }
    return sessionUIStates.value.get(sessionId)!
  }

  // 设置会话的标题生成状态
  const setSessionSummarizing = (sessionId: string, isSummarizing: boolean) => {
    const state = getSessionUIState(sessionId)
    state.isSummarizing = isSummarizing
  }

  // 手动生成会话标题
  const generateSessionTitleManually = async (sessionId: string): Promise<string> => {
    try {
      // 设置生成状态
      setSessionSummarizing(sessionId, true)

      // 调用生成标题接口
      const title = await generateSessionTitle(sessionId)

      // 更新会话标题
      await updateSessionTitle(sessionId, title)

      return title
    }
    finally {
      // 清除生成状态
      setSessionSummarizing(sessionId, false)
    }
  }

  return {
    // 状态
    sessions: readonly(sessions),
    currentSession: readonly(currentSession),
    isLoading: readonly(isLoading),
    error: readonly(error),

    // 加载状态
    isCreatingSession: computed(() => createSessionStatus.value === 'loading'),
    isUpdatingTitle: computed(() => updateSessionStatus.value === 'loading'),
    isDeletingSession: computed(() => deleteSessionStatus.value === 'loading'),
    isSavingMessages: computed(() => saveMessagesStatus.value === 'loading'),

    // 方法
    enableSessionsFetch, // 启用懒加载
    refreshSessions, // 保留用于手动刷新
    createNewSession,
    setCurrentSession,
    clearCurrentSession,
    updateSessionTitle,
    deleteSession,
    saveCurrentChatToSession,
    loadMessagesFromSession,
    getSessionUIState,
    setSessionSummarizing,
    generateSessionTitleManually,
  }
})
